#ifndef DEF_CONSTANTES
#define DEF_CONSTANTES

#define COULEUR 32
#define CASE   10
#define TAILLE_BLOC         10
#define LARGEUR_FENETRE     1280
#define HAUTEUR_FENETRE     900
#define NB_BLOCS_LARGEUR    LARGEUR_FENETRE / TAILLE_BLOC
#define NB_BLOCS_HAUTEUR    HAUTEUR_FENETRE/ TAILLE_BLOC
#define MINY    TAILLE_BLOC*2 + 7
#define MINX    TAILLE_BLOC + 7
#define MAXY    NB_BLOCS_HAUTEUR - TAILLE_BLOC - 4
#define MAXX    NB_BLOCS_LARGEUR - TAILLE_BLOC - 8
#define VOLUME  3 //15
#define BLUE_BONUS  5
#define RED_BONUS   20
#define ECART 33
#define NB_PLAYER 2         // vous pouvez mettre le nombre de joueurs que vous voulez
#define DEGAT_EPEE 5
#define RECUP_RUBIS 3
#define CENTRE_CERCLE_X  (LARGEUR_FENETRE/2 -50) / TAILLE_BLOC
#define CENTRE_CERCLE_Y  (HAUTEUR_FENETRE/2) / TAILLE_BLOC
#define DEGAT_BOMBE 75
#define RECUP_DEGAT_BOMBE 25
#define RAYON_BOMBE 10

/*
    Ajout de la structure propre à chaque IA
*/
typedef struct Player Player;
struct Player
{
    int x;
    int y;
    int points;
    int item;
    bool bouclier;       // Est ce que l'IA pare les coups.
    int orientation;    // Direction dans laquelle regarde l'IA.
    int anim;           // Boucle qui servira pour les animations.
    int classement;
};

/*
    Ajout de la structure propre à chaque bombe
*/
typedef struct Item Item;
struct Item
{
    int x;
    int y;
    int tours;
    int joueur;
    int anim;
    bool active;
};

enum {UP, DOWN, LEFT, RIGHT,ANIM_UP1,ANIM_UP2,ANIM_UP3,ANIM_DOWN1,ANIM_DOWN2,ANIM_DOWN3,ANIM_LEFT1,ANIM_LEFT2,ANIM_LEFT3,ANIM_RIGHT1,ANIM_RIGHT2,ANIM_RIGHT3, HIT_UP, HIT_DOWN, HIT_LEFT, HIT_RIGHT, SHIELD};
enum {HAUT, BAS, GAUCHE, DROITE, EPEE_HAUT,EPEE_BAS,EPEE_DROITE,EPEE_GAUCHE, PARER,BOMBE};  /// Différentes actions que peuvent faire les IA's
enum{GREEN_RUPEE,BLUE_RUPEE,RED_RUPEE,VIDE,MUR,IA,GANON,POT,BOMBE_MAP,BOMBE_DEFLAG};
int play (SDL_Surface* screen);
int movePlayer (int maps[][NB_BLOCS_HAUTEUR], SDL_Rect *position, int direction, Mix_Chunk *s_ruppes);
void SDL_Delay(Uint32 ms);
Uint32 SDL_GetTicks(void);
int Mix_OpenAudio(int frequency, Uint16 format, int channels, int chunksize);
int Mix_PlayMusic(Mix_Music *music, int loops);
void ganon_move(int maps[][NB_BLOCS_HAUTEUR], Mix_Chunk *s_degat, Player links[NB_PLAYER], SDL_Rect *position, int tours);
void setup_pictures (SDL_Surface *link[21],SDL_Surface *rupees[3],SDL_Surface *ganon[5], SDL_Surface *zelda[6], SDL_Surface *guard[16], SDL_Surface *skull[4],SDL_Surface *daruina[4],SDL_Surface *granma[4],SDL_Surface *koume[4],SDL_Surface *maple [4],SDL_Surface *oldman[4],SDL_Surface *nayru[4],SDL_Surface *saria[4],SDL_Surface *sheik[4], SDL_Surface *ruto[4], SDL_Surface *rauru[4], SDL_Surface *bombes[10]);
void setup_map (int maps[][NB_BLOCS_HAUTEUR]);
void timer (char temps[],char score[],int time,int lastTime,int stime,int mtime,int points);
int win (bool survivant, SDL_Surface* screen, Mix_Music *gerudo, Player links[NB_PLAYER], int continuer, int tours);
void animation(SDL_Surface* screen, SDL_Surface *zelda[6], SDL_Surface *skull[4],SDL_Surface *daruina[4],SDL_Surface *granma[4],SDL_Surface *koume[4],SDL_Surface *maple [4],SDL_Surface *oldman[4],SDL_Surface *nayru[4],SDL_Surface *saria[4],SDL_Surface *sheik[4], SDL_Surface *ruto[4], SDL_Surface *rauru[4], int tours);
void garde(SDL_Surface* screen, SDL_Surface *guard[16], int tours);
int test_ia(int maps[][NB_BLOCS_HAUTEUR]);
void damage(int maps[][NB_BLOCS_HAUTEUR], Player links[NB_PLAYER], int playernow);
int test_ia(int maps[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int bouclier, int orientation);
void blit_items(int maps[][NB_BLOCS_HAUTEUR], SDL_Surface* screen, SDL_Surface* rupees[3], SDL_Surface *bombes[10]);
void setup_ia(int maps[][NB_BLOCS_HAUTEUR], Player links[NB_PLAYER]);
bool test_class(int maps[][NB_BLOCS_HAUTEUR], Player links[NB_PLAYER]);
void item(int maps[][NB_BLOCS_HAUTEUR], Player links[NB_PLAYER], int tours, Item bombes [100]);
/*
Fonction qui renvoie un entier pour faire bouger l'IA
*/
//// Chasse

int i, j,t,r;



        for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== IA)
                {
                    t = i;
                    r = j;
                }
            }
                 for (j = y; j< NB_BLOCS_LARGEUR; j++)
                {
                    if (maps_ia[i][j]== IA)
                    {
                        t = i;
                        r = j;
                    }
                }

        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
                if (maps_ia[i][j]== IA)
                {
                    t = i;
                    r = j;
                }
                for (j = NB_BLOCS_LARGEUR; j> y; j++)
                {
                    if (maps_ia[i][j]== IA)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }

        if (t == 0)
        {
            return DOWN;
        }

        if (t+1 < x)
        {
            return LEFT;
        }
        else if (t+1 > x)
        {
            return RIGHT;
        }
        else if (r>y)
        {
            return DOWN;
        }
        else
        {
            return UP;
        }
        
        
        
        
        /////FIN CHASSE
        
        
        
        
        
        
        
        
        
        
        
int ia_1(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
  int i, j,XR,YR,cas;
     int rad = 15;
    int go = 0;

    if (tours > 120)
    {
    ///radar
    do
    {
        i = x;
      while (i <= x+rad)
      {
          j = y;
          while (j <= y+rad)
          {

              if (maps_ia[i][j] == RED_RUPEE)
              {
                  XR = i;
                  YR = j;
                  go = 1;
              }
              j+=1;
          }
          i+=1;
      }
        i = rad;
      while (i >= x-rad)
      {
          j = y;
          while (j <= y+rad)
          {

              if (maps_ia[i][j] == RED_RUPEE)
              {
                  XR = i;
                  YR = j;
                  go = 1;
              }
              j+=1;
          }
          i-=1;
      }
        i = x;
      while (i <= x+rad)
      {
          j = rad;
          while (j>= y-rad)
          {

              if (maps_ia[i][j] == RED_RUPEE)
              {
                  XR = i;
                  YR = j;
                  go = 1;
              }
              j-=1;
          }
          i+=1;
      }
        i = rad;
      while (i >= x-rad)
      {
          j = rad;
          while (j >= y-rad)
          {

              if (maps_ia[i][j] == RED_RUPEE)
              {
                  XR = i;
                  YR = j;
              }
              j-=1;
          }
          i-=1;
      }
    }
    while (go==1);
    }
    else
        {
             return EPEE_HAUT;
        }



 if (x < XR)
  {
      cas = 1;
  }
   if (x > XR)
  {
     cas = 2;
  }
  if (y < YR)
  {
     cas = 3;
  }
  if (y > YR)
  {
      cas = 4;
  }
  if (x == XR && y == YR)
  {
      cas = 5;
  }
    switch(cas)
    {
        case 1: return DROITE;
        case 2 : return GAUCHE;
        case 3 : return HAUT;
        case 4 : return BAS;
        case 5 : go = 1;
    }

}

int ia_2(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
        int i, j,XR,YR,cas;
     int rad = 15;
     int go = 1;
    ///radar (trop simpliste pour le moment)

if (tours > 150 && go == 1)
{
    for (i = x - rad; i <= x + rad; i++)
  {
    for (j = y - rad; j <= y + rad; j++);
    {
     if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE )
     {
         XR=i;
         YR=j;
         go = 0;
     }
    }
  }
}
else
{
    return EPEE_HAUT;
}


  if (x < XR)
  {
      cas = 1;
  }
   if (x > XR)
  {
     cas = 2;
  }
  if (y < YR)
  {
     cas = 3;
  }
  if (y > YR)
  {
      cas = 4;
  }
  if (x == XR && y == YR)
  {
      cas = 5;
  }
    switch(cas)
    {
        case 1: return DROITE;
        case 2 : return GAUCHE;
        case 3 : return HAUT;
        case 4 : return BAS;
        case 5 : go = 1;
    }


}






int ia_1(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    int i, j, t = 0, r = 0;

    while(tours>200)
    {
        t = 0;
        r = 0;
        for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== RED_RUPEE)
                {
                    t = i;
                    r = j;
                }
            }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
                for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j] == RED_RUPEE)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }

        if (t == 0)
        {
            return EPEE_BAS;
        }

        if (t < x)
        {
            return LEFT;
        }
        else if (t > x)
        {
            return RIGHT;
        }
        else if (r<y)
        {
            return DOWN;
        }
        else
        {
            return UP;
        }
    }

}





/*
int ia_1(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    if (rand()%25 == 0)
    {
        return  4 + rand()%4;
    }
    return  0 + rand()%4;
}

int ia_2(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    if (rand()%25 == 0)
    {
        return  4 + rand()%4;
    }
    return  0 + rand()%4;
}*/

#endif




C ICI !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



int ia_2(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    int i, j, t = 0, r = 0;

    while(tours>200)
    {
        t = 0;
        r = 0;
        for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                {
                    t = i;
                    r = j;
                }
            }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
                for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }

        if (t == 0)
        {
            return EPEE_BAS;
        }

        if (t+1 < x)
        {
            return LEFT;
        }
        else if (t+1 > x)
        {
            return RIGHT;
        }
        else if (r>y)
        {
            return DOWN;
        }
        else
        {
            return UP;
        }
    }

}



PROTOTYPE: Défense/attaque
int ia_1(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    {
    int i, j, t = 0, r = 0;

    while(tours>200)
    {
        t = 0;
        r = 0;
        for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                {
                    t = i;
                    r = j;
                }
            }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
                for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }

        if (t == 0)
        {
            return EPEE_BAS;
        }

        if (t+1 < x)
        {
            return LEFT;
        }
        else if (t+1 > x)
        {
            return RIGHT;
        }
        else if (r>y)
        {
            return DOWN;
        }
        /*
        x croissant et y décroissant (car avec SDL, on part généralement d'en haut à gauche :
                                       l'axe des x normal et l'axe des y qui part du haut vers le bas)
        maps_ia[x-1][y] = gauche
        maps_ia[x+1][y] = droite
        maps_ia[x][y-1] = haut
        maps_ia[x][y+1] = bas

        */
        else if(maps_ia[x-1][y] == IA || maps_ia[x+1][y] == IA||maps_ia[x][y-1] == IA||maps_ia[x][y+1] == IA)/// si il y a un joueur dans la case adjacente
        {///cas où il y a 1 seul ia autour de nous
            /// on traduit par exemple un ia qu'à droite par non(ia gauche)et non(ia haut) et non (ia bas) (à vérifier quand même)
            if(!(maps_ia[x-1][y] == IA)&& !(maps_ia[x+1][y] == IA)&& !(maps_ia[x][y-1] == IA)) // un ia en dessous
            {   if(points > 5)
                {
                    return EPEE_BAS;
                }
                else
                {
                   return PARER;
                }
            }
            else if(!(maps_ia[x-1][y] == IA)&& !(maps_ia[x+1][y] == IA)&& !(maps_ia[x][y+1] == IA)) // un ia au dessus
            {   /// on attaque que si l'on a au moins assez de vie pour survivre au cas où (normalement c'est 5 rubis)
                if(points > 5)// à moifier pour trouver un moyen d'être sûr d'avoir au moins 5 rubis
                {
                    return EPEE_HAUT;
                }
                else /// si on a pas assez de vie
                {
                   return PARER;
                }
            }
            else if(!(maps_ia[x-1][y] == IA)&& !(maps_ia[x][y-1] == IA)&& !(maps_ia[x][y+1] == IA)) // un ia à droite
            {
                if(points > 5)
                {
                   return EPEE_DROITE;
                }
                else
                {
                   return PARER;
                }

            }
            else if(!(maps_ia[x][y-1] == IA)&& !(maps_ia[x+1][y] == IA)&& !(maps_ia[x][y+1] == IA)) // un ia à gauche
            {
                if(points > 5)
                {
                    return EPEE_GAUCHE;
                }
                else
                {
                   return PARER;
                }
            }
            else/// si 2 ia ou + autour de nous -> on pare pour éviter de se faire prendre
            {
                return PARER;
            }

        }
        else
        {
            return UP;
        }





    }

}
}



DERNIERE VERSION QUI RAMASSE TT ET COMMENCE STRATEGIE D4EVITEMENT


int ia_2(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    int i, j, t = 0, r = 0;

    while(tours>1)
    {
        t = 0;
        r = 0;
        for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                {
                    t = i;
                    r = j;
                }
            }
             for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                    {
                        t = i;
                        r = j;
                    }
                }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                {
                    t = i;
                    r = j;
                }
            }
            for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }

        if (t == 0)
        {
       for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== POT)
                {
                    t = i;
                    r = j;
                }
            }
             for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== POT)
                    {
                        t = i;
                        r = j;
                    }
                }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== POT)
                {
                    t = i;
                    r = j;
                }
            }
            for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== POT)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }
        }
        if (t==0 && points >= 20)
        {
                for (i = 0; i< x; i++)
        {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== IA)
                {
                    t = i;
                    r = j;
                }
            }
             for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== IA)
                    {
                        t = i;
                        r = j;
                    }
                }
        }
        if (t == 0)
        {
            for (i = NB_BLOCS_HAUTEUR; i> x; i--)
            {
            for (j = 0; j< y; j++)
            {
                if (maps_ia[i][j]== IA)
                {
                    t = i;
                    r = j;
                }
            }
            for (j = NB_BLOCS_LARGEUR; j> y; j--)
                {
                    if (maps_ia[i][j]== IA)
                    {
                        t = i;
                        r = j;
                    }
                }
            }
        }
        }
       /* if (maps_ia[x+1][y]==IA)
        {
            if (points >= 20)
            {
                return EPEE_DROITE;
            }
            else
            {
                return PARER;
            }
        }
        if (maps_ia[x-1][y]==IA)
        {
            if (points >= 20)
            {
                return EPEE_GAUCHE;
            }
            else
            {
                return PARER;
            }
        }
        if (maps_ia[x][y+1]==IA)
        {
            if (points >= 20)
            {
                return EPEE_HAUT;
            }
            else
            {
                return PARER;
            }
        }
        if (maps_ia[x][y-1]==IA)
        {
            if (points >= 20)
            {
                return EPEE_BAS;
            }
            else
            {
                return PARER;
            }
        }*/
        /// partie fuite de l'ia
        if (maps_ia[x+2][y]==IA)
        {
           if (x == 0)
           {
               if (y == 0)
               {
                   return BAS;
               }
               else if (y == NB_BLOCS_LARGEUR)
               {
                   return HAUT;
               }
               else
               {
                   return GAUCHE;
               }
           }
        }
        if (maps_ia[x-2][y]==IA)
        {
             if (x == NB_BLOCS_HAUTEUR)
           {
               if (y == 0)
               {
                   return BAS;
               }
               else if (y == NB_BLOCS_LARGEUR)
               {
                   return HAUT;
               }
               else
               {
                   return DROITE;
               }
           }
        }
        if (maps_ia[x][y+2]==IA)
        {
            if (y == NB_BLOCS_LARGEUR)
           {
               if (x == 0)
               {
                   return DROITE;
               }
               else if (x == NB_BLOCS_HAUTEUR)
               {
                   return GAUCHE;
               }
               else
               {
                   return BAS;
               }
           }
        }
        if (maps_ia[x][y-2]==IA)
        {
            if (y == 0)
           {
               if (x == 0)
               {
                   return DROITE;
               }
               else if (x == NB_BLOCS_HAUTEUR)
               {
                   return GAUCHE;
               }
               else
               {
                   return HAUT;
               }
           }
        }
        if (t+1 < x)
        {
            return LEFT;
        }
        else if (t+1 > x)
        {
            return RIGHT;
        }
        else if (r>y)
        {
            return DOWN;
        }
        else
        {
            return UP;
        }
    }

}




NOUVELLE UPDATE
int ia_1(int maps_ia[][NB_BLOCS_HAUTEUR], int x, int y, int points, int item, int tours)
{
    int i, j, t = 0, r = 0,z=150,c1=0,c2=0,ennemi = 0,bombeX=0,bombeY=0,bombe = 0;
    float  a=0,b=0;
    int ia[20][2];

    t = 0;
    r = 0;
    for (i = MINX; i< MAXX; i++)
    {
        for (j = MINY; j< MAXY; j++)
        {
            ///VERIFICATION BOMBE AUTOUR DE L'IA
            if (maps_ia[i][j] == BOMBE_MAP)
            {
                bombeX = i;
                bombeY = j;
                if (abs(x-i)+abs(y-j)<=11)
                {
                    bombe = 1;
                }
            }
            ///RECUPERATION COORDONNEES RUBIS / POTS
            if (maps_ia[i][j]== RED_RUPEE || maps_ia[i][j]== BLUE_RUPEE || maps_ia[i][j]== GREEN_RUPEE || maps_ia[i][j] == POT)
            {
                if ((abs(x-i)+abs(y-j))<z)
                {
                    z = abs(x-i)+abs(y-j);
                    t = i;
                    r = j;
                }

            }
            ///VERIFICATION IA ENNEMI AUTOUR DE L'IA
            else if ((maps_ia[i][j]== IA) && (abs(x-i)+abs(y-j)!=0) )
            {
                if (abs(x-i)+abs(y-j)<=6)
                {
                    ia[c1][c2]= i;
                    c2+=1;
                    ia[c1][c2]= j;
                    c1+=1;
                    c2-=1;
                    ennemi = 1;
                 }
            }
        }
    }
    ///POSER BOMBE
    if ((maps_ia[x-2][y] == IA) || (maps_ia[x+2][y] == IA) || (maps_ia[x][y-2] == IA) || (maps_ia[x][y+2] == IA) || (maps_ia[x-1][y] == IA) || (maps_ia[x+1][y] == IA) || (maps_ia[x][y-1] == IA) || (maps_ia[x][y+1] == IA) || (maps_ia[x-3][y] == IA) || (maps_ia[x+3][y] == IA) || (maps_ia[x][y-3] == IA) || (maps_ia[x][y+3] == IA))
    {
        if (item == 1)
        {
            return BOMBE;
        }
    }
    ///FUIR BOMBE
    if (bombe == 1)
    {
        if (abs(x-bombeX) > abs(y-bombeY))
        {
            if (x < bombeX)
            {
                return LEFT;
            }
            else if (x > bombeX )
            {
                return RIGHT;
            }
        }
        if (abs(x-bombeX) < abs(y-bombeY))
        {
            if (y > bombeY)
            {
                return DOWN;
            }
            else if (y < bombeY )
            {
                return UP;
            }
        }
    }
    ///FUIR ENNEMI
    if (ennemi == 1)
    {
        c2 = 0;
        for (i=0; i< c1 ;i++)
        {
            a = (x-ia[i][c2])+a;
            b = (y-ia[i][c2+1])+b;
        }
        a = a/(c1);
        b = b/(c1);
        if (abs(a)>abs(b))
        {
            if (a < 0)
            {
                return LEFT;
            }
            else if (a > 0 )
            {
                return RIGHT;
            }
        }
        if (abs(a)<abs(b))
        {
            if (b > 0)
            {
                return DOWN;
            }
            else if (b < 0)
            {
                return UP;
            }
        }
        if (abs(a)== abs(b))
        {
            return rand()%3;
        }
    }
    ///RETOUR MILIEU DE CARTE
    if (t == 0)
    {
        if (abs(x-80) < abs(y-60) )
        {
            if (y < 60)
            {
                return DOWN;
            }
            else if (y > 60 )
            {
                return UP;
            }
        }
        if (abs(x-80) > abs(y-60) )
        {
            if (x < 80)
            {
                return RIGHT;
            }
            else if (x > 80 )
            {
                return LEFT;
            }
        }
    }
    ///DEPLACEMENT
    if (t+1 < x  )
    {
        return LEFT;
    }
    else if (t+1 > x)
    {
        return RIGHT;
    }
    else if (r>y )
    {
        return DOWN;
    }
    else
    {
        return UP;
    }
}
